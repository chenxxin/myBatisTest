<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!-- 全局参数设置 -->
    <settings>
        <!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射 -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!--
        <setting name="cacheEnabled" value="true"/>
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="multipleResultSetsEnabled" value="true"/>
        <setting name="useColumnLabel" value="true"/>
        <setting name="useGeneratedKeys" value="false"/>
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <setting name="defaultStatementTimeout" value="25000"/>
        <setting name="safeRowBoundsEnabled" value="false"/>
        <setting name="mapUnderscoreToCamelCase" value="false"/>
        <setting name="localCacheScope" value="SESSION"/>
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode ,toString"/>
        -->
    </settings>

    <!--
        在SQLMapper 配置文件中(UserMapper.xml)，resultType和ParameterType属性，需要使用JavaBean的完全限定名
        通过typeAlias 属性可以设置别名
        也可以不用为每一个 JavaBean单独定义别名, 可以提供需要取别名的 JavaBean所在的包 (package)，
        MyBatis会自动扫描包内定义的 JavaBeans，然后分别为JavaBean注册一个小写字母开头的非完全限定类名形式别名
    -->
    <typeAliases>
        <typeAlias alias="Student" type="com.mybatis3.domain.Student" />
        <typeAlias alias="Tutor" type="com.mybatis3.domain.Tutor" />
        <package name="com.mybatis3.domain" />
    </typeAliases>

    <!--
        MyBatis 对于以下类型使用内建的类型处理器：
        所有的基本数据类型、基本类型的包裹类型、byte[]、java.util.Date、java.sql.Date、java.sql.Time、java.sql.Timestamp、java枚举类型 等
        但是对于自定义的类型（PhoneNumber），就需要创建自定义的类型处理器了
    -->
    <!-- 注册自定义的类型处理器typeHandler -->
    <typeHandlers>
        <typeHandler handler="com.xin.typehandler.PhoneTypeHandler"/>
    </typeHandlers>

    <environments default="development">
        <environment id="development">
            <!--
                JDBC：应用程序负责管理数据库连接的生命周期（提交、回退等），MyBatis内部使用JdbcTransactionFactory类创建TransactionManager
                      例如，部署到Apache Tomcat的应用程序，需要应用程序自己管理事务；
                MANAGED：应用服务器负责管理数据库连接的生命周期，MyBatis内部使用ManagedTransactionFactory类创建TransactionManager
                         Managed是托管的意思，即应用本身不去管理事务，而是交给应用所在的服务器进行管理。

            -->
            <transactionManager type="JDBC" />

            <!--
                UNPOOLED: MyBatis 会为每个数据库操作创建一个新的连接，并关闭它。只适用于 只有小规模数量并发用户的简单应用程序；
                POOLED: Mybatis 会创建一个数据库连接池，连接池中的一个连接将会被用作数据库操作。一旦数据库操作完成，MyBatis会将此连接返回给连接池。 适用于开发和测试环境；
                JNDI: MyBatis 从应用服务器向配置好的JNDI数据源dateSource获取数据库连接。适用于生产环境
            -->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver" />
                <property name="url" value="jdbc:mysql://10.4.2.40:3306/kingsoftyun" />
                <property name="username" value="root" />
                <property name="password" value="111111" />
            </dataSource>
        </environment>
    </environments>

    <!--
        SQL映射定义Mappers
    -->
    <mappers>
        <!-- 注册userMapper.xml文件 -->
        <mapper resource="com/xin/mapping/userMapper.xml"/>  <!-- resource 用来指定在classpath中的mapper文件  -->
        <!--
        <mapper url="file:///D:/intellijcode/myBatisTest/.../userMapper.xml"/>  url 通过完全文件系统路径或者 web URL地址指向mapper文件
        <mapper class="com.xin.mapper.TutorMapper"/>  class 指向一个mapper接口
        <package name="com.xin.mapper"/>  package 指向可以找到mapper接口的包名
        -->
    </mappers>

</configuration>